---
import { isValidEmail } from "../services/validateContactForm";

const errors = { username: "", email: "", message: "", policy: "" };
if (Astro.request.method === "POST") {
  try {
  console.log("request");
    const data = await Astro.request.formData();
    const name = data.get("username");
    const email = data.get("email");
    const message = data.get("message");
    const policy = data.get("policy");

    if (!policy) {
      errors.policy += "Please accept the privacy policy. ";
    }
    if (typeof name !== "string" || name.length < 1) {
      errors.username += "Please enter a username.";
    }
    if (typeof message !== "string" || message.length < 1) {
      errors.message += "Please enter a message.";
    }
    if (typeof email !== "string" || !isValidEmail(email)) {
      errors.email += "Email is not valid.";
    }

    const hasErrors = Object.values(errors).some((msg) => msg);
    if (!hasErrors) {
      //AQUI MANDO EN MSG
      return Astro.redirect("/login");
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<section class="form-wrapper">
  <h1>Contacto</h1>
  <form method="POST">

    <label for="username">Nombre</label>
    <input type="text" name="username" id="username" required />
    {errors.username && <p>{errors.username}</p>}

    <label for="email">Email</label>
    <input type="email" name="email" id="email" required/>
    {errors.email && <p>{errors.email}</p>}

    <label for="message">Mensaje </label>
    <textarea name="message" id="message" required></textarea>
    {errors.message && <p>{errors.message}</p>}

    <div class="policy-validate">
        <input type="checkbox" name="policy" required>
        <label for="policy">He leído y acepto la <a href="#">política de privacidad</a> del sitio</label>
    </div>
    {errors.policy && <p>{errors.policy}</p>}

    <button>Enviar</button>

  </form>
</section>

<style>
  .form-wrapper {
    display: flex;
    flex-direction: column;
    min-width: 100vw;
    justify-content: center;
    align-items: center;
    color: white;
    margin: auto;
    background-color: var(--dark-background);
  }

  form {
    min-width: 30%;
    display: flex;
    flex-direction: column;
    padding: 2rem;
    gap: 1rem;

    & input{
        min-height: 30px;
    }

    & textarea{
        min-height: 100px;
        field-sizing: content;
    }

  }

  .policy-validate{
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  button{
    cursor: pointer;
    min-height: 50px;
    max-width: 50%;
    border-radius: 20px;
    background: var(--gradient-olive);
    color: white;
    transition: box-shadow linear 100ms;

    &:hover{
        background: linear-gradient(45deg,#FFFB7D 0%, #1c4626 100%);
        box-shadow: var(--shadow-olive);
    }

  }
  p{
    color: rgb(234, 106, 38);
  }
  
</style>
